import{_ as s,c as n,o as a,a as l}from"./app.a4c5765d.js";const F=JSON.parse('{"title":"(De)serializing","description":"","frontmatter":{},"headers":[{"level":2,"title":"Serializing","slug":"serializing","link":"#serializing","children":[]},{"level":2,"title":"Deserializing","slug":"deserializing","link":"#deserializing","children":[]}],"relativePath":"guide/serializing.md","lastUpdated":1683984098000}'),p={name:"guide/serializing.md"},e=l(`<h1 id="de-serializing" tabindex="-1">(De)serializing <a class="header-anchor" href="#de-serializing" aria-hidden="true">#</a></h1><p>In JavaScript, serializing is usually done with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noreferrer"><code>JSON.stringify()</code></a> and deserializing with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noreferrer"><code>JSON.parse()</code></a>.</p><h2 id="serializing" tabindex="-1">Serializing <a class="header-anchor" href="#serializing" aria-hidden="true">#</a></h2><p><code>Grid</code> has a <code>toJSON()</code> method that&#39;s <strong>automatically called</strong> when passing a grid to <code>JSON.stringify()</code>. <code>toJSON()</code> returns an object with the <a href="/honeycomb/api/interfaces/HexSettings.html">hex settings</a> (dimensions, orientation, origin and offset) and all its hexes. When this object is <em>stringified</em> by <code>JSON.stringify()</code>, the resulting string contains only the essential information to represent the grid.</p><details class="details custom-block"><summary>Details</summary><p>The hexes in the serialized grid only contain instance properties, which by default are each hex&#39;s <a href="/honeycomb/api/interfaces/AxialCoordinates.html">axial coordinates</a> and any custom properties in case of <a href="/honeycomb/guide/custom-hexes.html">custom hexes</a>.</p></details><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Hex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineHex</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">dimensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">orientation</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Orientation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FLAT </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> grid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Grid</span><span style="color:#A6ACCD;">(Hex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rectangle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">grid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    hexSettings: {dimensions: {…}, orientation: &#39;FLAT&#39;, origin: {…}, offset: -1}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    coordinates: (4) [Hex, Hex, Hex, Hex]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(grid)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {&quot;hexSettings&quot;:{&quot;dimensions&quot;:{&quot;xRadius&quot;:50,&quot;yRadius&quot;:50},&quot;orientation&quot;:&quot;FLAT&quot;,&quot;origin&quot;:{&quot;x&quot;:0,&quot;y&quot;:0},&quot;offset&quot;:-1},&quot;coordinates&quot;:[{&quot;q&quot;:0,&quot;r&quot;:0},{&quot;q&quot;:1,&quot;r&quot;:0},{&quot;q&quot;:0,&quot;r&quot;:1},{&quot;q&quot;:1,&quot;r&quot;:1}]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should rarely need to call <code>grid.toJSON()</code> yourself, because it&#39;s automatically called when passing the grid to <code>JSON.stringify()</code>.</p></div><h2 id="deserializing" tabindex="-1">Deserializing <a class="header-anchor" href="#deserializing" aria-hidden="true">#</a></h2><p>When you want to turn a string returned by <code>JSON.stringify(grid)</code> into a grid again, you have to pass it to <code>JSON.parse()</code> first and then to the <code>fromJSON()</code> static method of <code>Grid</code>:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> grid1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Grid</span><span style="color:#A6ACCD;">(Hex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rectangle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> serializedGrid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(grid1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// JSON.parse() always has \`any\` as its return type, so it&#39;s wise to manually type it</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> deserializedGrid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GridAsJSON</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(serializedGrid)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this returns a grid with the same Hex class and hexes as grid1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> grid2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Grid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromJSON</span><span style="color:#A6ACCD;">(deserializedGrid)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>Grid.fromJSON()</code> also accepts an optional function as a 2nd argument that&#39;s used to create the hexes in the grid:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomHex</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineHex</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">coordinates</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HexCoordinates</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">custom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CustomHex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">coordinates</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">hex</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">custom</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">custom</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hex</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">custom</span><span style="color:#89DDFF;">!:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hexes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">coordinates</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> CustomHex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(coordinates </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HexCoordinates</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">custom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> grid1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Grid</span><span style="color:#A6ACCD;">(CustomHex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hexes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> serializedGrid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(grid1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> deserializedGrid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GridAsJSON</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CustomHex</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(serializedGrid)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    hexSettings: …,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    coordinates: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        &quot;q&quot;: 0,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        &quot;r&quot;: 0,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        &quot;custom&quot;: &quot;custom&quot; 👈 custom property</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//      …</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> grid2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Grid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromJSON</span><span style="color:#A6ACCD;">(deserializedGrid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">q</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">custom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> CustomHex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">([q</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> custom))</span></span>
<span class="line"><span style="color:#A6ACCD;">grid2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toArray</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;q&quot;: 0,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;r&quot;: 0,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &quot;custom&quot;: &quot;custom&quot; 👈 custom property is retained through (de)serialization</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   …</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>`,12),o=[e];function t(r,c,i,y,A,C){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
